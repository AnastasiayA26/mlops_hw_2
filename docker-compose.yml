services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    networks: [ ml-scorer ]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    networks: [ ml-scorer ]
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9095", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy
    networks: [ ml-scorer ]
    restart: on-failure
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "
      echo 'Ожидание готовности Kafka...'
      while ! kafka-topics --bootstrap-server kafka:9092 --list; do
        sleep 1
      done

      echo 'Создание топиков...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic transactions --partitions 3 --replication-factor 1 --config retention.ms=604800000
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic scoring      --partitions 3 --replication-factor 1 --config retention.ms=604800000

      echo 'Топики успешно созданы:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    networks: [ ml-scorer ]
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  postgres:
      build:
        context: ./bd
        dockerfile: Dockerfile
      container_name: ml-postgres
      networks: [ ml-scorer ]
      environment:
        POSTGRES_DB: ml
        POSTGRES_USER: ml
        POSTGRES_PASSWORD: ml
      volumes:
        - pgdata:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ml -d ml"]
        interval: 5s
        timeout: 3s
        retries: 20
      ports:
        - "5432:5432"

  scoring-consumer:
    build:
      context: ./scoring_consumer
      dockerfile: Dockerfile
    command: python app.py
    networks: [ ml-scorer ]
    environment:
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_SCORING_TOPIC: "transactions"
      KAFKA_GROUP_ID: "scoring-consumer"
      # Postgres
      DATABASE_URL: postgresql://ml:ml@postgres:5432/ml
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: ml
      DB_USER: ml
      DB_PASS: ml
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: unless-stopped

  fraud_detector:
    build:
      context: ./fraud_detector
      dockerfile: Dockerfile
    networks: [ ml-scorer ]
    environment:
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TRANSACTIONS_TOPIC: "transactions"
      KAFKA_SCORING_TOPIC: "scoring"
      # Postgres — даём и URL, и раздельные части на всякий случай
      DATABASE_URL: postgresql://ml:ml@postgres:5432/ml
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: ml
      DB_USER: ml
      DB_PASS: ml
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_started
      postgres:
        condition: service_healthy

  interface:
    build:
      context: ./interface
      dockerfile: Dockerfile
    networks: [ ml-scorer ]
    environment:
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_TOPIC: "transactions"
      # доступ к БД из интерфейса (если нужно читать витрину)
      DATABASE_URL: postgresql://ml:ml@postgres:5432/ml
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: ml
      DB_USER: ml
      DB_PASS: ml
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8501:8501"

networks:
  ml-scorer:
    name: ml-scorer
    driver: bridge

volumes:
  pgdata:
